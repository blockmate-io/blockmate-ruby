=begin
#Blockmate

#Blockmate API OpenAPI documentation

The version of the OpenAPI document: 0.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'cgi'

module Blockmate
  class AccountProviderInfoApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Connect new account
    # @param account_provider [String] URL value from account_providers method
    # @param [Hash] opts the optional parameters
    # @option opts [ConnectAccountRequest] :connect_account_request OK
    # @return [ConnectAccount200Response]
    def connect_account(account_provider, opts = {})
      data, _status_code, _headers = connect_account_with_http_info(account_provider, opts)
      data
    end

    # Connect new account
    # @param account_provider [String] URL value from account_providers method
    # @param [Hash] opts the optional parameters
    # @option opts [ConnectAccountRequest] :connect_account_request OK
    # @return [Array<(ConnectAccount200Response, Integer, Hash)>] ConnectAccount200Response data, response status code and response headers
    def connect_account_with_http_info(account_provider, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountProviderInfoApi.connect_account ...'
      end
      # verify the required parameter 'account_provider' is set
      if @api_client.config.client_side_validation && account_provider.nil?
        fail ArgumentError, "Missing the required parameter 'account_provider' when calling AccountProviderInfoApi.connect_account"
      end
      # resource path
      local_var_path = '/v1/{account_provider}/connect'.sub('{' + 'account_provider' + '}', CGI.escape(account_provider.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'connect_account_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ConnectAccount200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ProjectToken']

      new_options = opts.merge(
        :operation => :"AccountProviderInfoApi.connect_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountProviderInfoApi#connect_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete account
    # @param account_provider [String] URL value from account_providers method
    # @param account_id [String] Account ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_account(account_provider, account_id, opts = {})
      delete_account_with_http_info(account_provider, account_id, opts)
      nil
    end

    # Delete account
    # @param account_provider [String] URL value from account_providers method
    # @param account_id [String] Account ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_account_with_http_info(account_provider, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountProviderInfoApi.delete_account ...'
      end
      # verify the required parameter 'account_provider' is set
      if @api_client.config.client_side_validation && account_provider.nil?
        fail ArgumentError, "Missing the required parameter 'account_provider' when calling AccountProviderInfoApi.delete_account"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountProviderInfoApi.delete_account"
      end
      # resource path
      local_var_path = '/v1/{account_provider}/account/{account_id}'.sub('{' + 'account_provider' + '}', CGI.escape(account_provider.to_s)).sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['UserJWT']

      new_options = opts.merge(
        :operation => :"AccountProviderInfoApi.delete_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountProviderInfoApi#delete_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get account hint
    # @param account_provider [String] URL value from account_providers method
    # @param [Hash] opts the optional parameters
    # @return [GetAccountHint200Response]
    def get_account_hint(account_provider, opts = {})
      data, _status_code, _headers = get_account_hint_with_http_info(account_provider, opts)
      data
    end

    # Get account hint
    # @param account_provider [String] URL value from account_providers method
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAccountHint200Response, Integer, Hash)>] GetAccountHint200Response data, response status code and response headers
    def get_account_hint_with_http_info(account_provider, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountProviderInfoApi.get_account_hint ...'
      end
      # verify the required parameter 'account_provider' is set
      if @api_client.config.client_side_validation && account_provider.nil?
        fail ArgumentError, "Missing the required parameter 'account_provider' when calling AccountProviderInfoApi.get_account_hint"
      end
      # resource path
      local_var_path = '/v1/{account_provider}/connect'.sub('{' + 'account_provider' + '}', CGI.escape(account_provider.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAccountHint200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['UserJWT']

      new_options = opts.merge(
        :operation => :"AccountProviderInfoApi.get_account_hint",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountProviderInfoApi#get_account_hint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
