=begin
#Blockmate

#Blockmate API OpenAPI documentation

The version of the OpenAPI document: 0.0.2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'cgi'

module Blockmate
  class AddressNameAndCategoryInfoApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get address name and category info for multiple addresses
    # @param chain [String] Blockchain identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request_body Addresses for which name and category should be returned (maximum of 5000 in one request)
    # @return [Hash<String, GetAddressNameInfoMulti200ResponseValue>]
    def get_address_name_info_multi(chain, opts = {})
      data, _status_code, _headers = get_address_name_info_multi_with_http_info(chain, opts)
      data
    end

    # Get address name and category info for multiple addresses
    # @param chain [String] Blockchain identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request_body Addresses for which name and category should be returned (maximum of 5000 in one request)
    # @return [Array<(Hash<String, GetAddressNameInfoMulti200ResponseValue>, Integer, Hash)>] Hash<String, GetAddressNameInfoMulti200ResponseValue> data, response status code and response headers
    def get_address_name_info_multi_with_http_info(chain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressNameAndCategoryInfoApi.get_address_name_info_multi ...'
      end
      # verify the required parameter 'chain' is set
      if @api_client.config.client_side_validation && chain.nil?
        fail ArgumentError, "Missing the required parameter 'chain' when calling AddressNameAndCategoryInfoApi.get_address_name_info_multi"
      end
      # resource path
      local_var_path = '/v1/addressname/multi'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chain'] = chain

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'request_body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, GetAddressNameInfoMulti200ResponseValue>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ProjectJWT', 'UserJWT']

      new_options = opts.merge(
        :operation => :"AddressNameAndCategoryInfoApi.get_address_name_info_multi",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressNameAndCategoryInfoApi#get_address_name_info_multi\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get address name and category info for single address
    # @param address [String] Address for which name and category should be returned
    # @param chain [String] Blockchain identifier
    # @param [Hash] opts the optional parameters
    # @return [GetAddressNameInfoSingle200Response]
    def get_address_name_info_single(address, chain, opts = {})
      data, _status_code, _headers = get_address_name_info_single_with_http_info(address, chain, opts)
      data
    end

    # Get address name and category info for single address
    # @param address [String] Address for which name and category should be returned
    # @param chain [String] Blockchain identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAddressNameInfoSingle200Response, Integer, Hash)>] GetAddressNameInfoSingle200Response data, response status code and response headers
    def get_address_name_info_single_with_http_info(address, chain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressNameAndCategoryInfoApi.get_address_name_info_single ...'
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling AddressNameAndCategoryInfoApi.get_address_name_info_single"
      end
      # verify the required parameter 'chain' is set
      if @api_client.config.client_side_validation && chain.nil?
        fail ArgumentError, "Missing the required parameter 'chain' when calling AddressNameAndCategoryInfoApi.get_address_name_info_single"
      end
      # resource path
      local_var_path = '/v1/addressname/simple'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'address'] = address
      query_params[:'chain'] = chain

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAddressNameInfoSingle200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ProjectJWT', 'UserJWT']

      new_options = opts.merge(
        :operation => :"AddressNameAndCategoryInfoApi.get_address_name_info_single",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressNameAndCategoryInfoApi#get_address_name_info_single\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
